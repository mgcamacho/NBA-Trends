# Importamos las bibliotecas necesarias para el análisis
import pandas as pd
import numpy as np
from scipy.stats import pearsonr, chi2_contingency
import matplotlib.pyplot as plt
import seaborn as sns
# Para que la salida se vea más bonita
np.set_printoptions(suppress=True, precision = 2)
# Leemos el archivo csv que contiene los datos de los partidos y mostramos las primeras filas del dataframe resultante
nba = pd.read_csv('nba_games.csv')
nba.head()
# Filtramos los datos por año y creamos dos subconjuntos: uno para la temporada 2010 y otro para la 2014
nba_2010 = nba[nba.year_id == 2010]
nba_2014 = nba[nba.year_id == 2014]
# Extraemos los puntos anotados por los equipos Knicks y Nets en la temporada 2010 y calculamos la diferencia de medias entre ambos
knicks_pts = nba_2010[nba_2010.fran_id == 'Knicks']['pts']
nets_pts = nba_2010[nba_2010.fran_id == 'Nets']['pts']

diff_means_2010 = knicks_pts.mean() - nets_pts.mean()
diff_means_2010
# Graficamos las distribuciones de los puntos de ambos equipos usando histogramas superpuestos
plt.hist(knicks_pts, alpha = .8, density = True, label = 'Knicks')
plt.hist(nets_pts, alpha = .8, density = True, label = 'Nets')
plt.legend()
plt.title("Temporada 2010")
plt.show()
# Repetimos los pasos anteriores para la temporada 2014
knicks_pts_14 = nba_2014[nba_2014.fran_id == 'Knicks']['pts']
nets_pts_14 = nba_2014[nba_2014.fran_id == 'Nets']['pts']
​
diff_means_2014 = knicks_pts_14.mean() - nets_pts_14.mean()
print(diff_means_2014)
​
plt.hist(knicks_pts_14, alpha = .8, density = True, label = 'Knicks')
plt.hist(nets_pts_14, alpha = .8, density = True, label = 'Nets')
plt.legend()
plt.title("Temporada 2014")
plt.show()
# Usamos un diagrama de caja para comparar los puntos anotados por todos los equipos en la temporada 2010
sns.boxplot(data = nba_2010, x = 'fran_id', y = 'pts')
plt.show()
# Creamos una tabla de contingencia para analizar la relación entre el resultado del partido (ganar o perder) y la ubicación del mismo (local o visitante)
location_result_freq = pd.crosstab(nba_2010.game_result, nba_2010.game_location)
location_result_freq

location_result_proportions = location_result_freq/len(nba_2010)
location_result_proportions
# Aplicamos una prueba chi-cuadrado para evaluar si hay una asociación significativa entre ambas variables
chi2, pval, dof, expected = chi2_contingency(location_result_freq)
print(expected)
print(chi2)
# Calculamos la covarianza y la correlación entre la diferencia de puntos y el pronóstico de victoria
point_diff_forecast_cov = np.cov(nba_2010.point_diff, nba_2010.forecast)
point_diff_forecast_cov

point_diff_forecast_corr = pearsonr(nba_2010.forecast, nba_2010.point_diff)
point_diff_forecast_corr
# Graficamos un diagrama de dispersión para visualizar la relación entre ambas variables
plt.clf() #para borrar el gráfico anterior
plt.scatter('forecast', 'point_diff', data=nba_2010)
plt.xlabel('Probabilidad de victoria pronosticada')
plt.ylabel('Diferencia de puntos')
plt.show()
